; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=nanomips-unknown=elf -verify-machineinstrs < %s | FileCheck %s

define dso_local i64 @lshift64(i64 signext %a, i32 signext %b) local_unnamed_addr {
; CHECK-LABEL: lshift64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    save 16, $s0
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset 16, -4
; CHECK-NEXT:    not $s0, $a2
; CHECK-NEXT:    srl $a3, $a0, 1
; CHECK-NEXT:    srlv $a3, $a3, $s0
; CHECK-NEXT:    sllv $a1, $a1, $a2
; CHECK-NEXT:    or $a1, $a1, $a3
; CHECK-NEXT:    sllv $a0, $a0, $a2
; CHECK-NEXT:    andi $a2, $a2, 0x20
; CHECK-NEXT:    movn $a1, $a0, $a2
; CHECK-NEXT:    movn $a0, $zero, $a2
; CHECK-NEXT:    restore.jrc 16, $s0
entry:
  %sh_prom = zext i32 %b to i64
  %shl = shl i64 %a, %sh_prom
  ret i64 %shl
}

define dso_local i64 @rashift64(i64 signext %a, i32 signext %b) local_unnamed_addr {
; CHECK-LABEL: rashift64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    save 16, $s0
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset 16, -4
; CHECK-NEXT:    not $s0, $a2
; CHECK-NEXT:    sll $a3, $a1, 1
; CHECK-NEXT:    sllv $a3, $a3, $s0
; CHECK-NEXT:    srlv $a0, $a0, $a2
; CHECK-NEXT:    or $a0, $a3, $a0
; CHECK-NEXT:    srav $a3, $a1, $a2
; CHECK-NEXT:    andi $a2, $a2, 0x20
; CHECK-NEXT:    movn $a0, $a3, $a2
; CHECK-NEXT:    sra $a1, $a1, 31
; CHECK-NEXT:    movz $a1, $a3, $a2
; CHECK-NEXT:    restore.jrc 16, $s0
entry:
  %sh_prom = zext i32 %b to i64
  %shr = ashr i64 %a, %sh_prom
  ret i64 %shr
}

define dso_local i64 @rshift64(i64 zeroext %a, i32 signext %b) local_unnamed_addr {
; CHECK-LABEL: rshift64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    save 16, $s0
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset 16, -4
; CHECK-NEXT:    not $s0, $a2
; CHECK-NEXT:    sll $a3, $a1, 1
; CHECK-NEXT:    sllv $a3, $a3, $s0
; CHECK-NEXT:    srlv $a0, $a0, $a2
; CHECK-NEXT:    or $a0, $a3, $a0
; CHECK-NEXT:    srlv $a1, $a1, $a2
; CHECK-NEXT:    andi $a2, $a2, 0x20
; CHECK-NEXT:    movn $a0, $a1, $a2
; CHECK-NEXT:    movn $a1, $zero, $a2
; CHECK-NEXT:    restore.jrc 16, $s0
entry:
  %sh_prom = zext i32 %b to i64
  %shr = lshr i64 %a, %sh_prom
  ret i64 %shr
}

define dso_local i64 @lshift64s(i64 signext %a, i32 signext %b) local_unnamed_addr #0 {
; CHECK-LABEL: lshift64s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    save 16, $ra
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset 31, -4
; CHECK-NEXT:    balc __ashldi3
; CHECK-NEXT:    restore.jrc 16, $ra
entry:
  %sh_prom = zext i32 %b to i64
  %shl = shl i64 %a, %sh_prom
  ret i64 %shl
}

define dso_local i64 @rashift64s(i64 signext %a, i32 signext %b) local_unnamed_addr #0 {
; CHECK-LABEL: rashift64s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    save 16, $ra
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset 31, -4
; CHECK-NEXT:    balc __ashrdi3
; CHECK-NEXT:    restore.jrc 16, $ra
entry:
  %sh_prom = zext i32 %b to i64
  %shr = ashr i64 %a, %sh_prom
  ret i64 %shr
}

define dso_local i64 @rshift64s(i64 zeroext %a, i32 signext %b) local_unnamed_addr #0 {
; CHECK-LABEL: rshift64s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    save 16, $ra
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset 31, -4
; CHECK-NEXT:    balc __lshrdi3
; CHECK-NEXT:    restore.jrc 16, $ra
entry:
  %sh_prom = zext i32 %b to i64
  %shr = lshr i64 %a, %sh_prom
  ret i64 %shr
}

attributes #0 = { optsize }
